comment: Generate a PDF report given a CSV file and a JRXML report file
↓inputVars [steps.InputVariablesStep-1714728054077]: 
↓jasperParams [steps.JsonSourceStep-1714728082473]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1714728054077
        - java.lang.String: 
          - ↑value: ./jasperParams/array
  variableName: jasperParams
↓Generate [steps.SimpleStep-1714579851727]: 
  expression: |
    '// We use the JavaImporter to import java classes with shorter names
    var imports = new JavaImporter(
    	java.io.File,
    	java.io.FileNotFoundException,
    	java.util.HashMap,
    	java.lang.System,
    	net.sf.jasperreports.engine.JRException,
    	net.sf.jasperreports.engine.JasperCompileManager,
    	net.sf.jasperreports.engine.JasperFillManager,
    	net.sf.jasperreports.engine.JasperPrint,
    	net.sf.jasperreports.engine.JasperReport,
    	net.sf.jasperreports.engine.data.JRCsvDataSource,
    	net.sf.jasperreports.engine.export.JRPdfExporter,
    	net.sf.jasperreports.export.ExporterInput,
    	net.sf.jasperreports.export.SimpleExporterInput,
    	net.sf.jasperreports.export.SimpleOutputStreamExporterOutput,
    	
    	com.twinsoft.convertigo.engine.Engine
    );
    
    
    // use the JavaImporter
    with (imports) {
    	
    	System.setProperty("java.awt.headless", "true");
    	
    
    	csvFileName = Engine.theApp.filePropertyManager.getFilepathFromProperty(csvFileName, context.projectName)
    	jrxmlFileName = Engine.theApp.filePropertyManager.getFilepathFromProperty(jrxmlFileName, context.projectName)
    	pdfFileName = Engine.theApp.filePropertyManager.getFilepathFromProperty(pdfFileName, context.projectName)
    
    /*
    	csvFileName = context.getProjectDirectory()  + "/" + csvFileName;
    	jrxmlFileName = context.getProjectDirectory() + "/" + jrxmlFileName;
    	pdfFileName = context.getProjectDirectory() + "/" + pdfFileName;
    */
    
    	// Compile the jrxml file
    	log.info("Compiling JRXML file: " + jrxmlFileName);
    	var jasperReport = JasperCompileManager.compileReport(jrxmlFileName);
    
    	// Create a new JRCsvDataSource object with the csv file
    	log.info("Creating CSV data source: " + csvFileName);
    	var dataSource = new JRCsvDataSource(csvFileName);
    
    	// Set the field delimiter
    	dataSource.setFieldDelimiter('';''); // specify the field delimiter in your CSV
        dataSource.setRecordDelimiter("\n"); // specify the record delimiter in your CSV
        dataSource.setUseFirstRowAsHeader(true); // use the first row as header
    
    
    	// Fill the report with the data source
    	log.info("Filling the report with the data source");
    	parameters = new HashMap();
    	parameters.put("ROOT_PATH", context.getProjectDirectory() + "/");
    	
    	
    	// for each jasperParams object having a dynamic key name and a value
    	if (typeof(jasperParams) != "undefined") {
    		log.warn("jasperParams: " + JSON.stringify(jasperParams));
    		for (var jParam of jasperParams) {
    			// get the key
    			var key = Object.keys(jParam)[0];
    		    // get the value
    		    var value = jParam[key];			
    			// add the parameter to the parameters map
    			log.warn("key: " + key + " value: " + value);
    			parameters.put(key, value);
    		}
    	}	
    	
    	var jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, dataSource);
    
    	// Export the report to a pdf file
    	log.info("Exporting the report to a PDF file: " + pdfFileName);
    	var exporter = new JRPdfExporter();
    	var exporterInput = new SimpleExporterInput(jasperPrint);
    	var exporterOutput = new SimpleOutputStreamExporterOutput(pdfFileName);
    	exporter.setExporterInput(exporterInput);
    	exporter.setExporterOutput(exporterOutput);
    	exporter.exportReport();
    
    	// Return the pdf file name
    	nbPages = jasperPrint.getPages().size();
    }'
↓generatedPages [steps.JsonFieldStep-1714598160229]: 
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: generatedPages
  value: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: nbPages
↓csvFileName [variables.RequestableVariable-1714580154821]: 
  comment: The CSV file name relative to the project's root
↓jrxmlFileName [variables.RequestableVariable-1714580174708]: 
  comment: The JRXML file relative to the project's root
↓pdfFileName [variables.RequestableVariable-1714580187209]: 
  comment: The output PDF file relative to the projects's root
↓jasperParams [variables.RequestableVariable-1714727803335]: 
  comment: An array of objects containing variable keys and values
↓TestOK [core.TestCase]: 
  ↓csvFileName [variables.TestCaseVariable-1714580426661]: 
    value: .//data/data.csv
  ↓jrxmlFileName [variables.TestCaseVariable-1714580426663]: 
    value: .//data/Cherry_Landscape.jrxml
  ↓pdfFileName [variables.TestCaseVariable-1714580426665]: 
    value: .//data/report.pdf